// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskManagement.Api.Data;

#nullable disable

namespace TaskManagement.Api.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "24f34061-f8a8-482d-92c6-9309fcb40ce5",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "d8d51d40-25f8-4817-bd08-19373348100f",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TaskManagement.Api.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Stakeholder Interviews",
                            TeamId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Requirements Documentation",
                            TeamId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Use Case Analysis",
                            TeamId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Requirements Review",
                            TeamId = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "System Architecture Design",
                            TeamId = 2
                        },
                        new
                        {
                            Id = 6,
                            Name = "UI/UX Design",
                            TeamId = 2
                        },
                        new
                        {
                            Id = 7,
                            Name = "Database Design",
                            TeamId = 2
                        },
                        new
                        {
                            Id = 8,
                            Name = "Technical Specification",
                            TeamId = 2
                        },
                        new
                        {
                            Id = 9,
                            Name = "Frontend Development",
                            TeamId = 3
                        },
                        new
                        {
                            Id = 10,
                            Name = "Backend Development",
                            TeamId = 3
                        },
                        new
                        {
                            Id = 11,
                            Name = "API Development",
                            TeamId = 3
                        },
                        new
                        {
                            Id = 12,
                            Name = "Mobile App Development",
                            TeamId = 3
                        },
                        new
                        {
                            Id = 13,
                            Name = "Integration Development",
                            TeamId = 3
                        },
                        new
                        {
                            Id = 14,
                            Name = "Unit Testing",
                            TeamId = 4
                        },
                        new
                        {
                            Id = 15,
                            Name = "Integration Testing",
                            TeamId = 4
                        },
                        new
                        {
                            Id = 16,
                            Name = "System Testing",
                            TeamId = 4
                        },
                        new
                        {
                            Id = 17,
                            Name = "User Acceptance Testing (UAT)",
                            TeamId = 4
                        },
                        new
                        {
                            Id = 18,
                            Name = "Performance Testing",
                            TeamId = 4
                        },
                        new
                        {
                            Id = 19,
                            Name = "Security Testing",
                            TeamId = 4
                        },
                        new
                        {
                            Id = 20,
                            Name = "Deployment Planning",
                            TeamId = 5
                        },
                        new
                        {
                            Id = 21,
                            Name = "Server Setup",
                            TeamId = 5
                        },
                        new
                        {
                            Id = 22,
                            Name = "Continuous Integration/Continuous Deployment (CI/CD)",
                            TeamId = 5
                        },
                        new
                        {
                            Id = 23,
                            Name = "Environment Configuration",
                            TeamId = 5
                        },
                        new
                        {
                            Id = 24,
                            Name = "Bug Fixes",
                            TeamId = 6
                        },
                        new
                        {
                            Id = 25,
                            Name = "Performance Optimization",
                            TeamId = 6
                        },
                        new
                        {
                            Id = 26,
                            Name = "Security Patches",
                            TeamId = 6
                        },
                        new
                        {
                            Id = 27,
                            Name = "System Monitoring",
                            TeamId = 6
                        },
                        new
                        {
                            Id = 28,
                            Name = "Project Planning",
                            TeamId = 7
                        },
                        new
                        {
                            Id = 29,
                            Name = "Resource Allocation",
                            TeamId = 7
                        },
                        new
                        {
                            Id = 30,
                            Name = "Progress Tracking",
                            TeamId = 7
                        },
                        new
                        {
                            Id = 31,
                            Name = "Risk Management",
                            TeamId = 7
                        },
                        new
                        {
                            Id = 32,
                            Name = "Client Communication",
                            TeamId = 7
                        },
                        new
                        {
                            Id = 33,
                            Name = "Technical Documentation",
                            TeamId = 8
                        },
                        new
                        {
                            Id = 34,
                            Name = "User Manuals",
                            TeamId = 8
                        },
                        new
                        {
                            Id = 35,
                            Name = "API Documentation",
                            TeamId = 8
                        },
                        new
                        {
                            Id = 36,
                            Name = "Change Logs",
                            TeamId = 8
                        },
                        new
                        {
                            Id = 37,
                            Name = "Code Review",
                            TeamId = 9
                        },
                        new
                        {
                            Id = 38,
                            Name = "Test Case Development",
                            TeamId = 9
                        },
                        new
                        {
                            Id = 39,
                            Name = "Test Automation",
                            TeamId = 9
                        },
                        new
                        {
                            Id = 40,
                            Name = "QA Reporting",
                            TeamId = 9
                        },
                        new
                        {
                            Id = 41,
                            Name = "Developer Training",
                            TeamId = 10
                        },
                        new
                        {
                            Id = 42,
                            Name = "User Training",
                            TeamId = 10
                        },
                        new
                        {
                            Id = 43,
                            Name = "Onboarding Documentation",
                            TeamId = 10
                        },
                        new
                        {
                            Id = 44,
                            Name = "Feasibility Studies",
                            TeamId = 11
                        },
                        new
                        {
                            Id = 45,
                            Name = "Proof of Concept (PoC)",
                            TeamId = 11
                        },
                        new
                        {
                            Id = 46,
                            Name = "Technology Evaluation",
                            TeamId = 11
                        },
                        new
                        {
                            Id = 47,
                            Name = "Prototyping",
                            TeamId = 11
                        },
                        new
                        {
                            Id = 48,
                            Name = "Customer Support",
                            TeamId = 12
                        },
                        new
                        {
                            Id = 49,
                            Name = "Help Desk",
                            TeamId = 12
                        },
                        new
                        {
                            Id = 50,
                            Name = "Technical Support",
                            TeamId = 12
                        },
                        new
                        {
                            Id = 51,
                            Name = "Market Research",
                            TeamId = 13
                        },
                        new
                        {
                            Id = 52,
                            Name = "Sales Strategy",
                            TeamId = 13
                        },
                        new
                        {
                            Id = 53,
                            Name = "Product Demos",
                            TeamId = 13
                        },
                        new
                        {
                            Id = 54,
                            Name = "Marketing Campaigns",
                            TeamId = 13
                        },
                        new
                        {
                            Id = 55,
                            Name = "Recruitment",
                            TeamId = 14
                        },
                        new
                        {
                            Id = 56,
                            Name = "Employee Onboarding",
                            TeamId = 14
                        },
                        new
                        {
                            Id = 57,
                            Name = "Performance Reviews",
                            TeamId = 14
                        },
                        new
                        {
                            Id = 58,
                            Name = "Employee Training",
                            TeamId = 14
                        },
                        new
                        {
                            Id = 59,
                            Name = "Budgeting",
                            TeamId = 15
                        },
                        new
                        {
                            Id = 60,
                            Name = "Financial Reporting",
                            TeamId = 15
                        },
                        new
                        {
                            Id = 61,
                            Name = "Invoice Management",
                            TeamId = 15
                        },
                        new
                        {
                            Id = 62,
                            Name = "Administrative Support",
                            TeamId = 15
                        });
                });

            modelBuilder.Entity("TaskManagement.Api.Models.TaskModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Duedate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("TaskManagement.Api.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Requirements Gathering"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Design"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Development"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Testing"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Deployment"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Maintenance"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Project Management"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Documentation"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Quality Assurance"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Training"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Research and Development"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Client Support"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Sales and Marketing"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Human Resources"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Finance and Administration"
                        });
                });

            modelBuilder.Entity("TaskManagement.Api.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TaskManagement.Api.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TaskManagement.Api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TaskManagement.Api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManagement.Api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TaskManagement.Api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskManagement.Api.Models.Category", b =>
                {
                    b.HasOne("TaskManagement.Api.Models.Team", "Team")
                        .WithMany("Categories")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TaskManagement.Api.Models.TaskModel", b =>
                {
                    b.HasOne("TaskManagement.Api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskManagement.Api.Models.UserProfile", b =>
                {
                    b.HasOne("TaskManagement.Api.Models.Team", "Team")
                        .WithMany("UserProfiles")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManagement.Api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskManagement.Api.Models.Team", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("UserProfiles");
                });
#pragma warning restore 612, 618
        }
    }
}
